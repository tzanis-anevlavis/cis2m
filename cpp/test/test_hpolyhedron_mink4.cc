#include "hpolyhedron.hpp"
#include <Eigen/Dense>
#include <iostream>
#include <vector>

#include <iomanip> // std::setprecision

using Eigen::MatrixXd;
using Eigen::VectorXd;

int main() {
  // Minkowski 4 -- This is from drone supervision IROS (using Safe(1))

  // Safe set:
  MatrixXd Gx(30, 9);
  Gx << 1.0, 0, 0, 0, 0, 0, 0, 0, 0, -1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0, 0, 0,
      0, 0, 0, 0, 0, 0, -1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0, 0, 0, 0, 0, 0, 0,
      0, 0, -1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0, 0, 0, 0, 0, 0, 0, 0, 0, -1.0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0, 0, 0, 0, 0, 0, 0, 0, 0, -1.0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1.0, 0, 0, 0, 0, 0, 0, 0, 0, -1.0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1.0, 0, 0, 0, 0, 0, 0, 0, 0, -1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0, 0,
      0, 0, 0, 0, 0, 0, 0, -1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0, 0, 0, 0, 0, 0,
      0, 0, 0, -1.0, 0.0, 0.0, 0.3162, 0, 0, 0, 0, 0, 0, 0.0, 0.0, 0.3162, 0, 0,
      0, 0, 0, 0, 0, 0.3162, 0.0, 0, 0, 0, 0, 0, 0, 0.0, 0.3162, 0.0, 0, 0, 0,
      0, 0, 0, -0.3162, 0.0, 0.0, 0, 0, 0, 0, 0, 0, -0.3162, 0.0, 0.0, 0, 0, 0,
      0, 0, 0, 0.3162, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0.3162, 0.0, 0.0, 0, 0, 0, 0,
      0, 0, 0.0, -0.5547, 0.0, 0, 0, 0, 0, 0, 0, 0.0, -0.5547, 0.0, 0, 0, 0, 0,
      0, 0, 0.0, 0.0, -0.3162, 0, 0, 0, 0, 0, 0, 0.0, 0.0, -0.3162, 0, 0, 0, 0,
      0, 0;
  MatrixXd Fx(30, 1);
  Fx << 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 0.866, 0.866, 0.866, 0.866, 0.866, 0.866,
      2.8319, 2.8319, 2.8319, 2.8319, 2.8319, 2.8319, 0.9487, 0.9487, 0.9487,
      0.9487, 0.9487, 0.9487, 0.9487, 0.9487, -0.8321, -0.8321, 0.9487, 0.9487;
  cis2m::HPolyhedron SafeSet(Gx, Fx);

  // Disturbance set:
  MatrixXd W_A(18, 9);
  W_A << MatrixXd::Identity(9, 9), -MatrixXd::Identity(9, 9);
  VectorXd W_b(18, 1);
  W_b << 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.05, 0.05, 0.05, 0.01, 0.01, 0.01,
      0.01, 0.01, 0.01, 0.05, 0.05, 0.05;
  cis2m::HPolyhedron W(W_A, W_b);

  // System Dynamics
  MatrixXd At(9, 9);
  At << 1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0, 0,
      0, 0, 0, 0, 0, 0.1200, 0, 0, 1.0, 0, 0, 0, 0, 0, 0, 0.1200, 0, 0, 1.0, 0,
      0, 0, 0, 0, 0, 0.1200, 0, 0, 1.0, 0, 0, 0, 0.0072, 0, 0, 0.1200, 0, 0,
      1.0, 0, 0, 0, 0.0072, 0, 0, 0.1200, 0, 0, 1.0, 0, 0, 0, 0.0072, 0, 0,
      0.1200, 0, 0, 1.0;
  MatrixXd A = At.transpose();
  MatrixXd B(9, 3);
  B << 0.000288, 0, 0, 0, 0.000288, 0, 0, 0, 0.000288, 0.0072, 0, 0, 0, 0.0072,
      0, 0, 0, 0.0072, 0.1200, 0, 0, 0, 0.1200, 0, 0, 0, 0.1200;

  //   std::cout << "A: " << std::endl << SafeSet.Ai() << std::endl;

  cis2m::HPolyhedron S1 = (SafeSet - W);
  std::cout << " ===== Minkowski Difference ===== " << std::endl;
  std::cout << "S1 = (SafeSet - W): " << std::endl;
  std::cout << "A: " << std::endl
            << std::scientific << std::setprecision(20) << S1.Ai() << std::endl;
  std::cout << "b: " << std::endl
            << std::scientific << std::setprecision(20) << S1.bi() << std::endl;
  std::cout << "Set size: " << S1.Ai().rows() << " x " << S1.Ai().cols()
            << std::endl;

  return 0;
}
